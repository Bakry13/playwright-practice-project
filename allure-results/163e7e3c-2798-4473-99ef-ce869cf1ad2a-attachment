# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Login test @ft >> invalid login
- Location: D:\Course\PlaywrightFramework\tests\ui\specs\firstScript.spec.ts:15:9

# Error details

```
Error: Timed out 6000ms waiting for expect(locator).toContainText(expected)

Locator: locator('div[id=\'flash\'] b')
Expected string: "Your used password is invalid!"
Received string: "Your password is invalid!"
Call log:
  - expect.toContainText with timeout 6000ms
  - waiting for locator('div[id=\'flash\'] b')
    7 Ã— locator resolved to <b>Your password is invalid!</b>
      - unexpected value "Your password is invalid!"

    at D:\Course\PlaywrightFramework\tests\ui\specs\firstScript.spec.ts:20:57
```

# Page snapshot

```yaml
- paragraph:
  - link "TestifyStack"
  - text: "| Email, SMS, OTP and Webhooks Testing Stack for QA & Dev"
- banner:
  - navigation "Main navigation":
    - link "SUT":
      - 'img "Best Website for Practice Automation Testing: Free UI and REST API Examples and Apps. Using Cypress, Playwright, Selenium, WebdriverIO and Postman."'
      - text: Practice
    - list:
      - listitem:
        - button "Demos"
      - listitem:
        - link "Tools"
      - listitem:
        - link "Tips"
      - listitem:
        - link "Test Cases"
      - listitem:
        - link "API Testing"
      - listitem:
        - link "About"
    - list
    - link "Automation Training"
- main:
  - alert:
    - text: Your password is invalid!
    - button "Close"
  - paragraph:
    - text: Do you enjoy this platform? Support us!
    - link "Buy me a coffee"
  - navigation "breadcrumb mb-2":
    - list:
      - listitem:
        - link "Home"
      - listitem: / Login Page
  - heading "Test Login page for Automation Testing Practice" [level=1]
  - paragraph: This Test Login page is designed for automation testing practice. Test various positive and negative login scenarios in a testing environment.
  - paragraph: You can use this login page for practicing with Selenium or other tools like Playwright, Cypress, etc.
  - paragraph:
    - text: Register
    - link "here"
    - text: "or Log in to the secure area with these credentials:"
  - list:
    - listitem: "Username: practice"
    - listitem: "Password: SuperSecretPassword!"
  - paragraph
  - text: Username
  - textbox "Username"
  - text: Password
  - textbox "Password"
  - button "Login"
  - heading "How to test the login page?" [level=2]
  - paragraph: If the credentials are correct, you should see a welcome message; otherwise, you will see an error message.
  - paragraph: The login feature is essential for secure websites and is commonly used. Automating the testing of various login scenarios, including different edge cases, is crucial to ensure reliability and security.
  - heading "How Does Form-Based Authentication Work?" [level=3]
  - paragraph: "Take a look at this diagram and review the different steps:"
  - img "How Does Form-Based Authentication Work"
  - list:
    - listitem: "Step 1: A client requests access to a protected resource"
    - listitem: "Step 2: If the client is unauthenticated, the server redirects the client to a login page"
    - listitem: "Step 3: The client submits the login form to the server"
    - listitem: "Step 4: If the login succeeds, the server redirects the client to the resource. If the login fails, the client is redirected to an error page"
- contentinfo:
  - heading "Practice Test Automation WebSite for Web UI and Rest API" [level=4]
  - paragraph:
    - text: "Version: ce8d5cae | Copyright"
    - link "Expand Testing"
    - text: "2025"
- img
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 |
   3 | test.describe('Login test @ft', ()=> {
   4 |     test('valid login', async ({page}, testInfo) => {
   5 |         await page.goto('https://practice.expandtesting.com/login');
   6 |         await page.pause();
   7 |         await page.locator("//input[@id='username']").fill('practice');
   8 |         await page.locator("//input[@id='password']").fill("SuperSecretPassword!");
   9 |         // await page.screenshot({path: 'screenshots/login.png'});
  10 |         // testInfo.attach(`${testInfo.title}`, {path: 'screenshots/login.png'});
  11 |         await page.locator("//button[normalize-space()='Login']").click();
  12 |         await expect(page.locator("div[id='flash'] b")).toContainText("You logged into a secure area!");
  13 |     });
  14 |     
  15 |     test('invalid login', async ({page}) => {
  16 |         await page.goto('https://practice.expandtesting.com/login');
  17 |         await page.locator("//input[@id='username']").fill('practice');
  18 |         await page.locator("//input[@id='password']").fill("SuperSecretPassword");
  19 |         await page.locator("//button[normalize-space()='Login']").click();
> 20 |         await expect(page.locator("div[id='flash'] b")).toContainText("Your used password is invalid!");
     |                                                         ^ Error: Timed out 6000ms waiting for expect(locator).toContainText(expected)
  21 |     });
  22 | });
  23 |
```